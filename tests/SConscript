import os
import os.path

Import('root_env SOURCE_FILES')

SOURCE_FILES.append(File('SConscript'))

env = root_env.Clone()

env.Prepend(CPPPATH=[".", "#/include", "$check_CPPPATH"],
            LIBPATH=[".", "#/src", "$check_LIBPATH"])


# The library with the common test callbacks.

libpushtests_files = map(File, \
    [
     "int-callback.c",
     "sum-callback.c",
    ])

SOURCE_FILES.extend(libpushtests_files)
SOURCE_FILES.append(File("test-callbacks.h"))

libpushtests = env.StaticLibrary("pushtests", libpushtests_files,
                                 LIBS=['push'])


# Give each test program an RPATH, so that it can find the libpush
# library while they're still in the source tree.

rpath = [env.Literal(os.path.join('\\$$ORIGIN', os.pardir, 'src'))]


def add_test(test_program):
    c_file = "%s.c" % test_program
    SOURCE_FILES.append(File(c_file))

    target = env.Program(test_program, [c_file],
                         LIBS=['push', libpushtests, '$check_LIB'],
                         RPATH=rpath)
    env.Alias("build-tests", target)

    run_test_target = env.Alias(test_program, [target],
                                ["@%s" % target[0].abspath])
    env.Alias("test", run_test_target)
    env.AlwaysBuild(run_test_target)


add_test("test-compose")
add_test("test-double-sum")
add_test("test-eof")
add_test("test-indexed-sum")
add_test("test-int")
add_test("test-noop")
add_test("test-pairs")
add_test("test-skip")
add_test("test-sum")

add_test("test-protobuf-message")
add_test("test-protobuf-varint32")
add_test("test-protobuf-varint64")


# Don't build the tests by default; but clean them by default.

if GetOption('clean'):
    env.Default("build-tests")
